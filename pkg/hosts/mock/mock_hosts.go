// Code generated by MockGen. DO NOT EDIT.
// Source: hosts.go

// Package mock is a generated GoMock package.
package mock

import (
	os "os"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockhostsWriter is a mock of hostsWriter interface.
type MockhostsWriter struct {
	ctrl     *gomock.Controller
	recorder *MockhostsWriterMockRecorder
}

// MockhostsWriterMockRecorder is the mock recorder for MockhostsWriter.
type MockhostsWriterMockRecorder struct {
	mock *MockhostsWriter
}

// NewMockhostsWriter creates a new mock instance.
func NewMockhostsWriter(ctrl *gomock.Controller) *MockhostsWriter {
	mock := &MockhostsWriter{ctrl: ctrl}
	mock.recorder = &MockhostsWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhostsWriter) EXPECT() *MockhostsWriterMockRecorder {
	return m.recorder
}

// OpenFile mocks base method.
func (m *MockhostsWriter) OpenFile(name string, flag int, perm os.FileMode) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockhostsWriterMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockhostsWriter)(nil).OpenFile), name, flag, perm)
}
